-figure out the memory layout, no need for rows cols capacity, maybe consider storing position of the cell as well, position will add 2*8 bytes, with 8 for length, that will be 24 bytes of metadata which i think is better, because the cells will be contiguous for cache locality, so the operations can be very fast, which is the point of this, or maybe figure out something else.
-if more memory needed to store the data, realloc the buffer with double the size, if more memory needed, say more than 128 chars, malloc that specific cell, so the rest will not get bigger for no benefit
note: maybe seperate the cells as cells holding doubles, chars and cells to be parsed, so everything is contiguous, cells with doubles are contiguous and stored by row, cells with chars contiguous in the case of sorting by name for example, cells to be parsed also contiguous so parsing is efficient, maybe? so many hypothesis but no testing.
note: how to allow user to modify cells that contains doubles? at any time they can modify the value, maybe copy the table, one copy only cells holding doubles, and the other for chars.
todo: make node struct use relative pointers instead of absolute for right,left
note: the one thing i haven't anticipated is fragmentation, if the user clicked on one cell, it will be added in the CellPos array, even without data, except if that cell got used again, cells wil lstill be contiguous especially compared to the previous approach, which was better in terms of getting and setting the cells because i was indexing the directly by row col position, now we need to traverse all of them to find the position we need, but the previous one had a lot of empty space which of course meant that the cells are not contiguous, which maybe doesn't perform as good as if the cells were?
todo: profile everything, i have no idea which memory layout is better

Rewrite:
i was afraid of failing first i wrote this, thinking about what memory layout and what not, i forgot to ask what i should be doing instead of modeling the problem, no one said i should make a table of cells, i just need to put the text on the screen, and that what i should have done since the beginning.
the plan now is to just map the input csv file into memory, and just render it, that's it, if my region is 40 lines by 10 columns, then i should just traverse that much, if i move that region, i should update it accordingly, only when there's an actual operation on a cell then i should just get the index to where that cell begins, and just write what should be the new overriden value in a new file, and when saving do the diff with the new file as the priority and commit, i don't have to modify the file or move memory (say a cell was 10 chars, if i want to replace the text inside with 20 chars, i don't have to move the rest of the cells just to fit the one in).
thus i need an input field, i should have made it since the beginning since i was going to need anyways, and i need to work on the new data structure or approach wich i think it is called 'piece table'.
